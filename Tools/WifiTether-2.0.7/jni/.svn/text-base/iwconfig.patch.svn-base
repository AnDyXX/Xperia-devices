--- iwconfig.c.old	2010-01-29 00:36:47.027633690 +1100
+++ iwconfig.c	2010-01-29 00:18:29.607634908 +1100
@@ -621,7 +621,9 @@
   struct iwreq		wrq;
   int			i = 1;
   char			essid[IW_ESSID_MAX_SIZE + 1];
+  char			q_essid[IW_ESSID_MAX_SIZE + 1];
   int			we_kernel_version;
+  int persist;
 
   if((!strcasecmp(args[0], "off")) ||
      (!strcasecmp(args[0], "any")))
@@ -683,15 +685,37 @@
   /* Get version from kernel, device may not have range... */
   we_kernel_version = iw_get_kernel_we_version();
 
-  /* Finally set the ESSID value */
-  wrq.u.essid.pointer = (caddr_t) essid;
-  wrq.u.essid.length = strlen(essid);
-  if(we_kernel_version < 21)
-    wrq.u.essid.length++;
+  persist = 0;
+	if((i < count && !strcmp(args[i], "persist")))
+	  {
+      persist = 1;
+	    ++i;
+	  }
 
-  if(iw_set_ext(skfd, ifname, SIOCSIWESSID, &wrq) < 0)
-    return(IWERR_SET_EXT);
-  
+  /* Finally set the ESSID value */
+  while (1) {
+    if (persist == 1) {
+    	memset(q_essid, '\0', sizeof(q_essid));
+    	wrq.u.essid.pointer = (caddr_t) q_essid;
+    	wrq.u.essid.length = IW_ESSID_MAX_SIZE + 1;
+    	wrq.u.essid.flags = 0;
+    	if(iw_get_ext(skfd, ifname, SIOCGIWESSID, &wrq) < 0)
+        return(IWERR_GET_EXT);
+      if (strlen(wrq.u.essid.pointer) > 0) {
+        sleep(1);
+        continue;
+      }
+    }
+    wrq.u.essid.pointer = (caddr_t) essid;
+    wrq.u.essid.length = strlen(essid);
+    if(we_kernel_version < 21)
+      wrq.u.essid.length++;
+
+    if(iw_set_ext(skfd, ifname, SIOCSIWESSID, &wrq) < 0)
+      return(IWERR_SET_EXT);
+    if (persist == 0) break;
+    sleep(1);
+  }
   /* Var args */
   return(i);
 }
@@ -1698,7 +1722,7 @@
 
 static const struct iwconfig_entry iwconfig_cmds[] = {
   { "essid",		set_essid_info,		1,	SIOCSIWESSID,
-	"Set ESSID",			"{NNN|any|on|off}" },
+	"Set ESSID",			"{NNN|any|on|off} {persist}" },
   { "mode",		set_mode_info,		1,	SIOCSIWMODE,
 	"Set Mode",			"{managed|ad-hoc|master|...}" },
   { "freq",		set_freq_info,		1,	SIOCSIWFREQ,
